<div id="masonry-container" class="transitions-enabled infinite-scroll clearfix">
  <div class="post"  id='0'>
    <div class="post-innerxxx">
      <div class="post-bodyxxx">
  Một ông khách chiều nào cũng vào một cửa hàng ăn cùng một con cò và một con mèo. <br>Dù
 ông ta uống gì và cho hai con kia ăn gì thì khi móc túi trả tiền, bao 
giờ cũng vừa đủ, không thừa, thiếu một xu. Một hôm, chủ quán tò mò hỏi:<br>- Anh có mẹo gì đặc biệt hay sao mà không cần đếm vẫn biết trả đủ tiền? <br>- Chuyện dài và buồn lắm! <br>-
 Cách đây mấy năm, tôi nhặt được một cái chai, mở nút ra thì có một vị 
thần xuất hiện và cho tôi ba điều ước. Điều thứ nhất của tôi là luôn có 
đủ tiền trả cho các món chi tiêu... <br>- Anh quả là sáng suốt! Thế còn hai điều kia? <br>- Thì đấy, tôi ước có bạn chân dài và môi ướt...<br>
</div>
  <div class="divider">
    ***
  </div>
</div>
</div>
<% @posts.each do |post| %>
<div class="post" id='<%= post.id %>' >
  <div class="post-inner">
    <div class="post-body">
      <%= raw post.body %>
    </div>
  <div class="divider">
    ***
  </div>
</div>
</div>
<% end %>
<div class="clearfix"></div>
</div>

<%= will_paginate $posts %>

<script type="text/javascript">
$(function(){
  <% if params[:read].nil? %>
    $('.post').dblclick(function(){
      handlePostSelect($(this));
    });
    $('.post').doubleTap(function(){
      handlePostSelect($(this));
    });
  <% end %>
});

(function($) {
     $.fn.doubleTap = function(doubleTapCallback) {
         return this.each(function(){
			var elm = this;
			var lastTap = 0;
			$(elm).bind('vmousedown', function (e) {
                                var now = (new Date()).valueOf();
				var diff = (now - lastTap);
                                lastTap = now ;
                                if (diff < 250) {
		                    if($.isFunction( doubleTapCallback ))
		                    {
		                       doubleTapCallback.call(elm);
		                    }
                                }      
			});
         });
    }
})(jQuery);


function handlePostSelect(post) {
  $.get('<%= read_posts_url %>',{id: post.attr('id') }, function(response){
    });
        fadeOutPost(post);
}

function fadeOutPost(post) {
    var top = post.position().top;
    var left = post.position().left;
    var height = post.height();
    var startH = top;
    post.fadeOut(400, function(){ 
      post.remove();
      findNearestDown(top, left, height, startH);
    });
}

function findNearestDown(currentTop, currentLeft, height, startH) {
  var count = 0;
  $('.post').each(function(i, v){
    var $this = $(v);
    var top = $this.position().top;
    var left = $this.position().left;
    var h = $this.height();
    if (left == currentLeft && top == currentTop + height) {
      $this.animate({
        top: startH
      }, {
        complete: function(){
          //alert(top + ' vs ' + h);
          startH += h;
          findNearestDown(top , left, h, startH);
        } 
      });  
    }
    
    //count the left equalities
    if (left == currentLeft) {
      count++;
    }
    
  });
  
  if (count == 0) {
    $('#masonry-container').masonry({
      itemSelector: '.post',
      gutter: 5,
      isAnimated: true,
      animationOptions: {
        duration: 750,
        easing: 'linear',
        queue: false
      }
    });
  }
}


</script>