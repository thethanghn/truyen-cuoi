<h1>Xiangqi - <%= @title %></h1>
<div class="row-fluid">
    <div class="col-md-8 left-col">
        <div class="canvas">
            <svg id="svg"></svg>
        </div>
    </div>
    <div class="col-md-4">
        <div class="actors">NO actor</div>
        <div>
            <div id="statetxt">
                undef
            </div>
        </div>
        <div class="bg-success" style="padding: 20px;">
            <h4>Chat windows</h4>
            <div id="theDialogue"></div>
            <h4>Your message:</h4>
            <form class="form-message horizontal-form" id="mainfrm">
                
                <div class="form-group">
                    <textarea class="form-control" type="text" id="input" rows="3"></textarea>
                </div>
                <div class="form-group">
                    <input type="submit" value="Send" class="btn btn-primary"
                     />
                     <button id="leavebtn" class="btn btn-default">Leave</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script type="text/javascript" src="/Photon/3rdparty/swfobject.js"></script>
<script type="text/javascript" src="/Photon/3rdparty/web_socket.js"></script>
<script type="text/javascript" src="/Photon/Photon-Javascript_SDK.js"></script>
<script type="text/javascript">

var AppInfo = {
//  Wss: true,
    AppId: "<%= ENV['PHOTON_APP_ID'] %>",
    AppVersion: "1.0",
//    FbAppId: "you fb app id", 
}
</script>
<%= javascript_include_tag "photon" %>
<script language="javascript">
var W, H, ROWS, COLUMNS, PIECE_SIZE, COL_HEIGHT, ROW_HEIGHT;
const MESSAGE_EVENT = 1,
    GAME_EVENT = 2
;

var data = getInitialPiece();

var pieceCodes = ['a', 'c', 'r', 'e', 'g', 'h', 's'];
var linePositions = [
        //rows
        [[0, 0], [8, 0]],
        [[0, 1], [8, 1]],
        [[0, 2], [8, 2]],
        [[0, 3], [8, 3]],
        [[0, 4], [8, 4]],
        [[0, 5], [8, 5] ],
        [[0, 6], [8, 6]],
        [[0, 7], [8, 7]],
        [[0, 8], [8, 8]],
        [[0, 9], [8, 9]],
        //cols
        [[0, 0], [0, 9]],
        [[8, 0], [8, 9]],
        [[1, 0], [1, 4]],
        [[1, 5], [1, 9]],
        [[2, 0], [2, 4]],
        [[2, 5], [2, 9]],
        [[3, 0], [3, 4]],
        [[3, 5], [3, 9]],
        [[4, 0], [4, 4]],
        [[4, 5], [4, 9]],
        [[5, 0], [5, 4]],
        [[5, 5], [5, 9]],
        [[6, 0], [6, 4]],
        [[6, 5], [6, 9]],
        [[7, 0], [7, 4]],
        [[7, 5], [7, 9]],
        //advisor crossing
        [[3, 0], [5, 2]],
        [[3, 2], [5, 0]],
        [[3, 7], [5, 9]],
        [[3, 9], [5, 7]],
    ];

function initResources(svg) {
    var defs = svg.append("defs");
    for(var j = 1; j <= 2; j++) {
        for(var i = 0; i < pieceCodes.length; i++) {
            var code = pieceCodes[i];
            var path = ['/xiangqi/', code, j, '.png'].join('');
            var pattern = defs.append("pattern")
                    .attr({ id: ["img", code, j].join(''), width: PIECE_SIZE, height: PIECE_SIZE, patternUnits:"userSpaceOnUse"})
                    .append("svg:image")
                    .attr("xlink:href", path)
                    .attr("width", PIECE_SIZE)
                    .attr("height", PIECE_SIZE)
                    .attr("x", 0)
                    .attr("y", 0);
        }
    }
}

function getInitialPiece() {
    return [
        { coords: [0, 0], code: 'r', set: 1, id: 'r-1-1' },
        { coords: [1, 0], code: 'h', set: 1, id: 'h-1-2' },
        { coords: [2, 0], code: 'e', set: 1, id: 'e-1-3' },
        { coords: [3, 0], code: 'a', set: 1, id: 'a-1-4' },
        { coords: [4, 0], code: 'g', set: 1, id: 'g-1-5' },
        { coords: [5, 0], code: 'a', set: 1, id: 'a-1-6' },
        { coords: [6, 0], code: 'e', set: 1, id: 'e-1-7' },
        { coords: [7, 0], code: 'h', set: 1, id: 'h-1-8' },
        { coords: [8, 0], code: 'r', set: 1, id: 'r-1-9' },
        { coords: [1, 2], code: 'c', set: 1, id: 'c-1-10' },
        { coords: [7, 2], code: 'c', set: 1, id: 'c-1-11' },
        { coords: [0, 3], code: 's', set: 1, id: 's-1-12' },
        { coords: [2, 3], code: 's', set: 1, id: 's-1-13' },
        { coords: [4, 3], code: 's', set: 1, id: 's-1-14' },
        { coords: [6, 3], code: 's', set: 1, id: 's-1-15' },
        { coords: [8, 3], code: 's', set: 1, id: 's-1-16' },
        { coords: [0, 9], code: 'r', set: 2, id: 'r-2-17' },
        { coords: [1, 9], code: 'h', set: 2, id: 'h-2-18' },
        { coords: [2, 9], code: 'e', set: 2, id: 'e-2-19' },
        { coords: [3, 9], code: 'a', set: 2, id: 'a-2-20' },
        { coords: [4, 9], code: 'g', set: 2, id: 'g-2-21' },
        { coords: [5, 9], code: 'a', set: 2, id: 'a-2-22' },
        { coords: [6, 9], code: 'e', set: 2, id: 'e-2-23' },
        { coords: [7, 9], code: 'h', set: 2, id: 'h-2-24' },
        { coords: [8, 9], code: 'r', set: 2, id: 'r-2-25' },
        { coords: [1, 7], code: 'c', set: 2, id: 'c-2-26' },
        { coords: [7, 7], code: 'c', set: 2, id: 'c-2-27' },
        { coords: [0, 6], code: 's', set: 2, id: 's-2-28' },
        { coords: [2, 6], code: 's', set: 2, id: 's-2-29' },
        { coords: [4, 6], code: 's', set: 2, id: 's-2-30' },
        { coords: [6, 6], code: 's', set: 2, id: 's-2-31' },
        { coords: [8, 6], code: 's', set: 2, id: 's-2-32' }
    ];
}

function drawSpots(svg) {
    var blankSpots = svg.append('g').attr({width: W, height: H});
    var spots = [];
    for(var i = 0; i < 10; i++) {
        for (var j = 0; j < 10; j++) {
            spots.push([i, j]);
        }
    }
    blankSpots.selectAll('.spot')
                .data(spots)
                .enter()
                .append('rect')
                .attr('class', function(d) { return 'rect-spot ' + getSpotCls(d)})
                .attr('transform', function(d) { return translateFromPosition(d);})
                .attr('width', PIECE_SIZE)
                .attr('height', PIECE_SIZE)
                .attr('fill', '#fff')
                .attr('fill-opacity', 0)
                .on('mouseover', function() {
                    d3.select(this).attr('style', 'stroke-width: 1px; stroke: yellow;');
                })
                .on('mouseout', function() {
                    d3.select(this).attr('style', 'stroke-width: 0;');  
                })
                .on('click', function() {
                    console.log('blankspot clicked');
                });
}

function drawLines(svg) {
    var lines = svg.append('g').attr({width: W, height: H});
    for(var i = 0; i < linePositions.length; i++) {
        var pair = linePositions[i];
        var point1 = pair[0];
        var point2 = pair[1];
        lines.append('line')
            .attr('x1', COL_HEIGHT * point1[0] + PIECE_SIZE / 2)
            .attr('y1', 2 + ROW_HEIGHT * point1[1] + PIECE_SIZE / 2)
            .attr('x2', COL_HEIGHT * point2[0] + PIECE_SIZE / 2)
            .attr('y2', 2 + ROW_HEIGHT * point2[1] + PIECE_SIZE / 2)
            .attr('style', 'stroke: #000; stroke-width: 1');
    }
}

function drawPieces(svg) {
    var pieces = svg.append('g')
        .attr('class', 'pieces')
        .attr('background-color', 'red')
        .attr('width', W)
        .attr('height', H);
    
    pieces.selectAll('.piece')
        .data(data)
        .enter()
        .append('rect')
        .attr('class', function(d) { return 'rect-piece ' + d.id })
        .attr('transform', function(d) { return translateFromPosition(d.coords)})
        .attr('width', PIECE_SIZE)
        .attr('height', PIECE_SIZE)
        .attr('fill', function(d) { return 'url(#img' + [d.code, d.set].join('') + ')';});

}

function getPieceCls(coords) {
    return ['piece', coords[0], coords[1]].join('-');
}

function getSpotCls(spot) {
    return ['spot', spot[0], spot[1]].join('-');
}

function xyFromPosition(coords) {
    c0 = Player.host ? coords[0] : COLUMNS - coords[0] - 1;
    c1 = Player.host ? coords[1] : ROWS - coords[1] - 1;
    // c0 = coords[0];
    // c1 = coords[1];
    x = COL_HEIGHT * c0;
    y = ROW_HEIGHT * c1;
    return [x, y];
}

function translateFromPosition(coords) {
    var xy = xyFromPosition(coords);
    return ['translate(', xy[0], ',', xy[1] , ')'].join('');
}

function resetGame() {
    $('.pieces').remove();
    var svg = d3.select('#svg');
    drawPieces(svg);
}

function clearSpotStyle() {
    d3.selectAll('.rect-spot').attr('style', 'stroke-width: 0');
}

var MoveChecker = (function(){

    var self = this;

    this._hasPieceAt = function(spot) {
        var b = data.filter(function(p) {
            return p.coords[0] == spot[0] && p.coords[1] == spot[1];
        });
        return b.length > 0;
    }

    this._isOccupiedSpot = function(spot, set) {
        var occupied = data.filter(function(piece) {
            return piece.coords[0] == spot[0] && piece.coords[1] == spot[1] && piece.set == set;
        });

        return occupied.length > 0;
    }

    this._isOutOfBound = function(spot) {
        return spot[0] < 0 || spot[0] > 8 || spot[1] < 0 || spot[1] > 9;
    }

    //some pieces have restriction
    this._isBlocked = function(spot, piece) {
        var result = false;
        switch(piece.code) {
            case 'h':
                //check each direction for blocking
                var toFind = null;
                //right
                if (spot[0] == piece.coords[0] + 1 || spot[0] == piece.coords[0] - 1) { //left
                    //top
                    if (spot[1] == piece.coords[1] - 2) {
                        toFind = [piece.coords[0], piece.coords[1] - 1];
                    } else { //bottom
                        toFind = [piece.coords[0], piece.coords[1] + 1];
                    }
                } else if (spot[1] == piece.coords[1] - 1 || spot[1] == piece.coords[1] + 1) {
                    if (spot[0] == piece.coords[0] + 2) {
                        toFind = [piece.coords[0] + 1, piece.coords[1]];
                    } else {
                        toFind = [piece.coords[0] - 1, piece.coords[1]];
                    }
                }

                if (toFind) {
                    result = self._hasPieceAt(toFind);
                }
            break;

            case 'c':
                //find the pieces in the middle
                var hasPiece = self._hasPieceAt(spot);
                var length = 0;
                //top
                if (spot[1] < piece.coords[1]) {
                    var res = data.filter(function(p) {
                        return p.coords[0] == piece.coords[0] &&  p.coords[1] > spot[1] && p.coords[1] < piece.coords[1];
                    });

                    length = res.length;
                } else if (spot[1] > piece.coords[1]) {
                    var res = data.filter(function(p) {
                        return p.coords[0] == piece.coords[0] &&  p.coords[1] > piece.coords[1] && p.coords[1] < spot[1];
                    });

                    length = res.length;
                } else if (spot[0] < piece.coords[0]) {
                    var res = data.filter(function(p) {
                        return p.coords[1] == piece.coords[1] &&  p.coords[0] > spot[0] && p.coords[0] < piece.coords[0];
                    });

                    length = res.length;
                } else if (spot[0] > piece.coords[0]) {
                    var res = data.filter(function(p) {
                        return p.coords[1] == piece.coords[1] &&  p.coords[0] > piece.coords[0] && p.coords[0] < spot[0];
                    });

                    length = res.length;
                }

                result =  (!hasPiece && res.length > 0) || (hasPiece && res.length != 1);
            break;

            case 'r':
                var length = 0;
                //top
                if (spot[1] < piece.coords[1]) {
                    var res = data.filter(function(p) {
                        return p.coords[0] == piece.coords[0] &&  p.coords[1] > spot[1] && p.coords[1] < piece.coords[1];
                    });

                    length = res.length;
                } else if (spot[1] > piece.coords[1]) {
                    var res = data.filter(function(p) {
                        return p.coords[0] == piece.coords[0] &&  p.coords[1] > piece.coords[1] && p.coords[1] < spot[1];
                    });

                    length = res.length;
                } else if (spot[0] < piece.coords[0]) {
                    var res = data.filter(function(p) {
                        return p.coords[1] == piece.coords[1] &&  p.coords[0] > spot[0] && p.coords[0] < piece.coords[0];
                    });

                    length = res.length;
                } else if (spot[0] > piece.coords[0]) {
                    var res = data.filter(function(p) {
                        return p.coords[1] == piece.coords[1] &&  p.coords[0] > piece.coords[0] && p.coords[0] < spot[0];
                    });

                    length = res.length;
                }

                result =  length > 0;
            break;

            case 'e':
                var toFind = null;
                //top
                if (spot[0] < piece.coords[0]) {
                    if (spot[1] < piece.coords[1]) {
                        toFind = [piece.coords[0] - 1, piece.coords[1] - 1];
                    } else {
                        toFind = [piece.coords[0] - 1, piece.coords[1] + 1];
                    }
                } else {
                    if (spot[1] < piece.coords[1]) {
                        toFind = [piece.coords[0] + 1, piece.coords[1] - 1];
                    } else {
                        toFind = [piece.coords[0] + 1, piece.coords[1] + 1];
                    }
                }

                result =  self._hasPieceAt(toFind);
            break;

            case 'g':
                if (piece.set == 1) {
                    result = spot[0] < 3 || spot[0] > 5 || spot[1] < 0 || spot[1] > 2;
                } else {
                    result = spot[0] < 3 || spot[0] > 5 || spot[1] < 7 || spot[1] > 9;
                }
            break;
        }
        return result;
    }

    this.soldierMoves = function(piece) {
        var coords = piece.coords;
        var spots = [];
        
        //only go down 1 step
        var y = coords[1];
        if (piece.set == 1) {
            if (y < 9) {
                spots.push([coords[0], y + 1]);
            }
            if (y > 4) {
                var x = coords[0];
                
                spots.push([x - 1, y]);
                spots.push([coords[0] + 1, y]);
            }
        } else {
            if (y > 0) {
                spots.push([coords[0], y - 1]);
            }
            if (y < 5) {
                var x = coords[0];
                spots.push([x - 1, y]);
                spots.push([coords[0] + 1, y]);
            }
        }
        return spots;
    }

    this.horseMoves = function(piece){
        var coords = piece.coords;
        var spots = [];
        
        //horse can move 8 ways
        //top
        spots.push([coords[0] - 1, coords[1] - 2]);
        spots.push([coords[0] + 1, coords[1] - 2]);
        //right
        spots.push([coords[0] + 2, coords[1] - 1]);
        spots.push([coords[0] + 2, coords[1] + 1]);
        //down
        spots.push([coords[0] - 1, coords[1] + 2]);
        spots.push([coords[0] + 1, coords[1] + 2]);
        //left
        spots.push([coords[0] - 2, coords[1] - 1]);
        spots.push([coords[0] - 2, coords[1] + 1]);
        
        return spots;
    }

    this.cannonMoves = function(piece) {
        var coords = piece.coords;
        var spots = [];
        
        //cannon can move left and right
        for (var i = 0; i < 9; i++) {
            if (i != coords[0]) {
                spots.push([i, coords[1]]);
            }
        }
        //cannon can move up and down
        for (var i = 0; i < 10; i++) {
            if (i != coords[1]) {
                spots.push([coords[0], i]);
            }
        }
        
        return spots;
    }

    this.rookMoves = function(piece) {
        //rook moves almost the same
        return self.cannonMoves(piece);
    }

    this.elephantMoves = function(piece) {
        var coords = piece.coords;
        var spots = [];
        
        //elephant can move 4 ways
        spots.push([coords[0] - 2, coords[1] - 2]);
        spots.push([coords[0] - 2, coords[1] + 2]);
        spots.push([coords[0] + 2, coords[1] - 2]);
        spots.push([coords[0] + 2, coords[1] + 2]);
        
        return spots;
    }

    this.advisorMoves = function(piece) {
        var coords = piece.coords;
        var spots = [];
        
        //elephant can move 4 ways
        spots.push([coords[0] - 1, coords[1] - 1]);
        spots.push([coords[0] - 1, coords[1] + 1]);
        spots.push([coords[0] + 1, coords[1] - 1]);
        spots.push([coords[0] + 1, coords[1] + 1]);
        
        return spots;
    }

    this.generalMoves = function(piece) {
        var coords = piece.coords;
        var spots = [];
        
        //elephant can move 4 ways
        spots.push([coords[0] - 1, coords[1]]);
        spots.push([coords[0] + 1, coords[1]]);
        spots.push([coords[0], coords[1] - 1]);
        spots.push([coords[0], coords[1] + 1]);
        
        return spots;
    }

    this.possibleMoves = function(piece) {
        console.log('possibleMoves');
        var spots = [];
        switch(piece.code) {
            case 's':
                spots = self.soldierMoves(piece);
                break;
            case 'h':
                spots = self.horseMoves(piece);
                break;
            case 'c':
                spots = self.cannonMoves(piece);
                break;
            case 'r':
                spots = self.rookMoves(piece);
                break;
            case 'e':
                spots = self.elephantMoves(piece);
                break;
            case 'a':
                spots = self.advisorMoves(piece);
                break;
            case 'g':
                spots = self.generalMoves(piece);
                break;
        }

        console.log(spots);

        spots = spots.filter(function(spot) { return !self._isOutOfBound(spot);});
        spots = spots.filter(function(spot) { return !self._isOccupiedSpot(spot, piece.set);});
        spots = spots.filter(function(spot) { return !self._isBlocked(spot, piece)});
        return spots;
    }

    this.highlightMoves = function(piece) {
        console.log('highlightMoves');
        var moves = self.possibleMoves(piece);
        for(var i = 0; i < moves.length; i++) {
            var m = moves[i];
            var ele = d3.select('.' + getSpotCls(m));
            ele.attr('style', 'stroke:green;stroke-width:1');
        }
    }

    this.canMove = function(piece, spot) {
        var spots = self.possibleMoves(piece);
        return spots.filter(function(d){ return d[0] == spot[0] && d[1] == spot[1]; }).length > 0;
    }

    return {
        highlightMoves: highlightMoves,
        canMove: canMove
    }
})();

var onMovePiece = null;
var Game = (function(){
    var self = this;
    
    this.findD3Piece = function(id) {
        return d3.select('.' + id);
        
    };

    this.resetPiece = function() {
        if (onMovePiece) {
            var ele = self.findD3Piece(onMovePiece.id);
            ele.attr('style', 'stroke:0;');
            onMovePiece = null;
        }
    };

    this.movePiece = function(piece, spot) {
        // var ele = self.findD3Piece(piece.id);
        //update the coords
        piece.coords = spot;
        // ele.transition().attr('transform', translateFromPosition(spot));
        self.refresh();
        clearSpotStyle();
    };

    this.refresh = function() {
        data.forEach(function(piece) {
            var ele = self.findD3Piece(piece.id);
            ele.transition().attr('transform', translateFromPosition(piece.coords));
        });
    }

    this.loadState = function(state) {
        data = state;
        self.refresh();
    }

    this.opponentMoveHandler = function(content) {
        console.log('opponentMoveHandler');
        var gameState = content.gameState;
        console.log(gameState);
        self.loadState(gameState);
    }

    return {
        resetPiece: resetPiece,
        movePiece: movePiece,
        opponentMoveHandler: opponentMoveHandler,
        loadState: loadState
    }
})();

</script>
<script language="javascript">
    WEB_SOCKET_SWF_LOCATION = "/Photon/3rdparty/WebSocketMain.swf";
    // Set this to dump debug message from Flash to console.log:
    WEB_SOCKET_DEBUG = false;
</script>
<script type="text/jsx">
var RoomActors = React.createClass({
    renderActors: function() {
        var actors = this.props.actors;
        return actors.map(function(actor){
            return <li>{actor.name}({actor.actorNr})</li>;
        });
    },
    render: function() {
        return <ul>
            {this.renderActors()}
        </ul>;
    }
});


function renderMyRoomActors(actors) {
    React.render(<RoomActors actors={actors}/>, $('.actors')[0]);
}
</script>
<script language="javascript">
var demo;
var pieceClickSourceSubscriber, spotClickSourceSubscriber;
var Player = {
    nbr: 0,
    name: '<%= @ope %>' == 'init' ? 'Player A' : 'Player B',
    host: '<%= @ope %>' == 'init' ? true : false
};

function reset() {
    pieceClickSourceSubscriber.dispose();
    spotClickSourceSubscriber.dispose();
    data = getInitialPiece();
    $('.rect-piece').remove();
    drawPieces(svg);
    attachHandlers();
}

function attachHandlers() {
    var pieceClickSource = Rx.Observable.fromEvent($('.rect-piece'), 'click');
    pieceClickSourceSubscriber = pieceClickSource.subscribe(
        function(x) {
            clearSpotStyle();
            var ele = d3.select(x.target);
            var pieceData = ele.data()[0];
            ele.attr('style', 'stroke:darkblue;stroke-width:1');
            onMovePiece = pieceData;
            MoveChecker.highlightMoves(pieceData);
        },
        function(e) { console.log('error on piece click');},
        function() { console.log('comleted');}
    );

    var spotClickSource = Rx.Observable.fromEvent($('.rect-spot'), 'click');
    spotClickSourceSubscriber = spotClickSource.subscribe(
        function(x) {
            console.log('spot clicked');
            var spotData = d3.select(x.target).data()[0];
            console.log(spotData);
            if (onMovePiece && MoveChecker.canMove(onMovePiece, spotData)) {
                Game.movePiece(onMovePiece, spotData);
                //send it to client
                demo.raiseEvent(GAME_EVENT, {gameState: data }, { cache: Photon.LoadBalancing.Constants.EventCaching.ReplaceCache });
                Game.resetPiece();
            }
        },
        function(e) { console.log('error on piece click');},
        function() { console.log('comleted');}
    );
}
$(function(){

    W = $('.left-col').width();
    H = W;
    ROWS = 10;
    COLUMNS = 9;

    PIECE_SIZE = Math.floor(60 * W / 800);

    COL_HEIGHT = Math.floor(W/COLUMNS);
    ROW_HEIGHT = Math.floor(H/ROWS);
    
    var svg = d3.select('#svg').attr({width: W, height: H});

    initResources(svg);

    drawLines(svg);

    drawSpots(svg);

    drawPieces(svg);    

    attachHandlers();

    demo = new MysteryXiangqiClient(Game, { 
        title: '<%= @title %>',
        name: '<%= @room.game_name %>',
        actorName: '<%= current_user.email %>',
        joinToken: <%= @room_user.join_token %>,
        ope: '<%= @ope %>',
        onJoinRoomHandler: function(createdByMe, name, joinToken) {
            console.log('onJoinRoomHandler');
            if (createdByMe) {
                var promise = $.post('<%= games_room_init_path(@room.id) %>', { game_name: name, join_token: joinToken}).
                    done(function(result){
                        alert('Game inited done');
                    }).
                    error(function(XMLHttpRequest, textStatus, errorThrown){
                        debugger;
                        alert('Unable to create room due to server error');
                        //window.location.href = '<%= games_xiangqi_index_path %>';
                    });
            }

            var objects = this.myRoomActors();
            var actors = [];
            for(var key in objects) {
                actors.push(objects[key]);
            }
            console.log('myRoomActors');
            console.log(actors);
            renderMyRoomActors(actors);
        }
    });
    MysteryXiangqiClient.prototype.onActorJoin = function(actor) {
        var objects = this.myRoomActors();
        var actors = [];
        for(var key in objects) {
            actors.push(objects[key]);
        }
        console.log('myRoomActors');
        console.log(actors);
        renderMyRoomActors(actors);
    }
    demo.start();
});
</script>