<h1>Xiangqi - <%= @title %></h1>
<div class="row-fluid">
    <div class="col-md-8 left-col">
        <div class="canvas">
            <div class="progress">
                <div class="progress-bar progress-bar-info progress-bar-striped active" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0">
                </div>
            </div>
            <svg id="svg"></svg>
        </div>
    </div>
    <div class="col-md-4 bg-success right-panel">
        
    </div>
</div>

<script type="text/javascript" src="/Photon/3rdparty/swfobject.js"></script>
<script type="text/javascript" src="/Photon/3rdparty/web_socket.js"></script>
<script type="text/javascript" src="/Photon/Photon-Javascript_SDK.js"></script>
<script type="text/javascript">

var AppInfo = {
//  Wss: true,
    AppId: "<%= ENV['PHOTON_APP_ID'] %>",
    AppVersion: "1.0",
//    FbAppId: "you fb app id", 
}
</script>
<%= javascript_include_tag "xiangqi/game" %>
<%= javascript_include_tag "xiangqi/photon" %>

<script language="javascript">
    WEB_SOCKET_SWF_LOCATION = "/Photon/3rdparty/WebSocketMain.swf";
    // Set this to dump debug message from Flash to console.log:
    WEB_SOCKET_DEBUG = false;
</script>

<script language="javascript">
var photonClient;
var game;
var pieceClickSourceSubscriber, spotClickSourceSubscriber;

var ClientState = {
    myActorNbr: 0,
    oppActorNbr: 0
};

var PlayerStatus = {
    New: 0,
    JoinedLobby: 1,
    JoinedRoom: 2,
    Ready: 3,
    NotReady: 2
};

var GamePhase = {
    StandBy: 0,
    OnGoing: 1
};

var GameState = {
    hostJoinToken: 0,
    actors: [
        {
            actorNr: 1,
            customProperties: {
                status: PlayerStatus.New
            },
            isLocal: true,
            name: null,
            suspended: false
        },
        {
            actorNr: 1,
            customProperties: {
                status: PlayerStatus.New
            },
            isLocal: true,
            name: null,
            suspended: false
        }
    ],
    phase: GamePhase.StandBy,
    messages: [],
    data: [
        { coords: [0, 0], code: 'r', set: 1, id: 'r-1-1' },
        { coords: [1, 0], code: 'h', set: 1, id: 'h-1-2' },
        { coords: [2, 0], code: 'e', set: 1, id: 'e-1-3' },
        { coords: [3, 0], code: 'a', set: 1, id: 'a-1-4' },
        { coords: [4, 0], code: 'g', set: 1, id: 'g-1-5' },
        { coords: [5, 0], code: 'a', set: 1, id: 'a-1-6' },
        { coords: [6, 0], code: 'e', set: 1, id: 'e-1-7' },
        { coords: [7, 0], code: 'h', set: 1, id: 'h-1-8' },
        { coords: [8, 0], code: 'r', set: 1, id: 'r-1-9' },
        { coords: [1, 2], code: 'c', set: 1, id: 'c-1-10' },
        { coords: [7, 2], code: 'c', set: 1, id: 'c-1-11' },
        { coords: [0, 3], code: 's', set: 1, id: 's-1-12' },
        { coords: [2, 3], code: 's', set: 1, id: 's-1-13' },
        { coords: [4, 3], code: 's', set: 1, id: 's-1-14' },
        { coords: [6, 3], code: 's', set: 1, id: 's-1-15' },
        { coords: [8, 3], code: 's', set: 1, id: 's-1-16' },
        { coords: [0, 9], code: 'r', set: 2, id: 'r-2-17' },
        { coords: [1, 9], code: 'h', set: 2, id: 'h-2-18' },
        { coords: [2, 9], code: 'e', set: 2, id: 'e-2-19' },
        { coords: [3, 9], code: 'a', set: 2, id: 'a-2-20' },
        { coords: [4, 9], code: 'g', set: 2, id: 'g-2-21' },
        { coords: [5, 9], code: 'a', set: 2, id: 'a-2-22' },
        { coords: [6, 9], code: 'e', set: 2, id: 'e-2-23' },
        { coords: [7, 9], code: 'h', set: 2, id: 'h-2-24' },
        { coords: [8, 9], code: 'r', set: 2, id: 'r-2-25' },
        { coords: [1, 7], code: 'c', set: 2, id: 'c-2-26' },
        { coords: [7, 7], code: 'c', set: 2, id: 'c-2-27' },
        { coords: [0, 6], code: 's', set: 2, id: 's-2-28' },
        { coords: [2, 6], code: 's', set: 2, id: 's-2-29' },
        { coords: [4, 6], code: 's', set: 2, id: 's-2-30' },
        { coords: [6, 6], code: 's', set: 2, id: 's-2-31' },
        { coords: [8, 6], code: 's', set: 2, id: 's-2-32' }
    ]
};

function reset() {
    pieceClickSourceSubscriber.dispose();
    spotClickSourceSubscriber.dispose();
    data = getInitialPiece();
    $('.rect-piece').remove();
    drawPieces(svg);
    attachHandlers();
}


function renderScreen() {
    console.log('renderScreen');
    var state = game.getState();
    var Factory = React.createFactory(RightPanel);
    var root = Factory(state);
    React.render(root, $('.right-panel').get(0));
}

$(function(){

    var settings = {
        title: '<%= @title %>',
        name: '<%= @room.game_name %>',
        myName: '<%= current_user.email %>',
        myNbr: <%= @room_user.join_token %>,
        ope: '<%= @ope %>',
        roomErrorUrl: '<%= games_room_error_path(@room.id) %>',
        initRoomUrl: '<%= games_room_init_path(@room.id) %>',
        lobbyUrl: '<%= games_xiangqi_index_path %>',
        canvasElement: '#svg',
        gameState: GameState,
        clientState: ClientState
    };
    

    game = new Game($('.left-col'), settings);
    game.startClient();
    // setTimeout(function(){
    //     if (game.state.actors.length < 2) {
    //         game.goToLobby('No one joins your room, please host another table or join others');
    //     }
    // }, 60000);

    renderScreen();
});
</script>