<h1>Xiangqi</h1>
<div class="row-fluid">
    <div class="col-md-8">
        <div class="canvas">
            <svg id="svg"></svg>
        </div>
    </div>
    <div class="col-md-4">
        <button id="btnResetGame">Reset</button>
    </div>
</div>
<script language="javascript">
const W = 650,
      H = 650,
      ROWS = 10,
      COLUMNS = 9,
      PIECE_SIZE = 40;

const COL_HEIGHT = Math.floor(W/COLUMNS),
        ROW_HEIGHT = Math.floor(H/ROWS);

var data = [
    { coords: [0, 0], code: 'r', set: 1, id: 'r-1-1' },
    { coords: [1, 0], code: 'h', set: 1, id: 'h-1-2' },
    { coords: [2, 0], code: 'e', set: 1, id: 'e-1-3' },
    { coords: [3, 0], code: 'a', set: 1, id: 'a-1-4' },
    { coords: [4, 0], code: 'g', set: 1, id: 'g-1-5' },
    { coords: [5, 0], code: 'a', set: 1, id: 'a-1-6' },
    { coords: [6, 0], code: 'e', set: 1, id: 'e-1-7' },
    { coords: [7, 0], code: 'h', set: 1, id: 'h-1-8' },
    { coords: [8, 0], code: 'r', set: 1, id: 'r-1-9' },
    { coords: [1, 2], code: 'c', set: 1, id: 'c-1-10' },
    { coords: [7, 2], code: 'c', set: 1, id: 'c-1-11' },
    { coords: [0, 3], code: 's', set: 1, id: 's-1-12' },
    { coords: [2, 3], code: 's', set: 1, id: 's-1-13' },
    { coords: [4, 3], code: 's', set: 1, id: 's-1-14' },
    { coords: [6, 3], code: 's', set: 1, id: 's-1-15' },
    { coords: [8, 3], code: 's', set: 1, id: 's-1-16' },
    { coords: [0, 9], code: 'r', set: 2, id: 'r-2-17' },
    { coords: [1, 9], code: 'h', set: 2, id: 'h-2-18' },
    { coords: [2, 9], code: 'e', set: 2, id: 'e-2-19' },
    { coords: [3, 9], code: 'a', set: 2, id: 'a-2-20' },
    { coords: [4, 9], code: 'g', set: 2, id: 'g-2-21' },
    { coords: [5, 9], code: 'a', set: 2, id: 'a-2-22' },
    { coords: [6, 9], code: 'e', set: 2, id: 'e-2-23' },
    { coords: [7, 9], code: 'h', set: 2, id: 'h-2-24' },
    { coords: [8, 9], code: 'r', set: 2, id: 'r-2-25' },
    { coords: [1, 7], code: 'c', set: 2, id: 'c-2-26' },
    { coords: [7, 7], code: 'c', set: 2, id: 'c-2-27' },
    { coords: [0, 6], code: 's', set: 2, id: 's-2-28' },
    { coords: [2, 6], code: 's', set: 2, id: 's-2-29' },
    { coords: [4, 6], code: 's', set: 2, id: 's-2-30' },
    { coords: [6, 6], code: 's', set: 2, id: 's-2-31' },
    { coords: [8, 6], code: 's', set: 2, id: 's-2-32' }
];

var pieceCodes = ['a', 'c', 'r', 'e', 'g', 'h', 's'];
var linePositions = [
        //rows
        [[0, 0], [8, 0]],
        [[0, 1], [8, 1]],
        [[0, 2], [8, 2]],
        [[0, 3], [8, 3]],
        [[0, 4], [8, 4]],
        [[0, 5], [8, 5] ],
        [[0, 6], [8, 6]],
        [[0, 7], [8, 7]],
        [[0, 8], [8, 8]],
        [[0, 9], [8, 9]],
        //cols
        [[0, 0], [0, 9]],
        [[8, 0], [8, 9]],
        [[1, 0], [1, 4]],
        [[1, 5], [1, 9]],
        [[2, 0], [2, 4]],
        [[2, 5], [2, 9]],
        [[3, 0], [3, 4]],
        [[3, 5], [3, 9]],
        [[4, 0], [4, 4]],
        [[4, 5], [4, 9]],
        [[5, 0], [5, 4]],
        [[5, 5], [5, 9]],
        [[6, 0], [6, 4]],
        [[6, 5], [6, 9]],
        [[7, 0], [7, 4]],
        [[7, 5], [7, 9]],
        //advisor crossing
        [[3, 0], [5, 2]],
        [[3, 2], [5, 0]],
        [[3, 7], [5, 9]],
        [[3, 9], [5, 7]],
    ];

function initResources(svg) {
    var defs = svg.append("defs");
    for(var j = 1; j <= 2; j++) {
        for(var i = 0; i < pieceCodes.length; i++) {
            var code = pieceCodes[i];
            var path = ['/xiangqi/', code, j, '.png'].join('');
            var pattern = defs.append("pattern")
                    .attr({ id: ["img", code, j].join(''), width: PIECE_SIZE, height: PIECE_SIZE, patternUnits:"userSpaceOnUse"})
                    .append("svg:image")
                    .attr("xlink:href", path)
                    .attr("width", PIECE_SIZE)
                    .attr("height", PIECE_SIZE)
                    .attr("x", 0)
                    .attr("y", 0);
        }
    }
}

function drawSpots(svg) {
    var blankSpots = svg.append('g').attr({width: W, height: H});
    var spots = [];
    for(var i = 0; i < 10; i++) {
        for (var j = 0; j < 10; j++) {
            spots.push([i, j]);
        }
    }
    blankSpots.selectAll('.spot')
                .data(spots)
                .enter()
                .append('rect')
                .attr('class', function(d) { return 'rect-spot ' + getSpotCls(d)})
                .attr('transform', function(d) { return ['translate(', COL_HEIGHT *d[0] , ',', ROW_HEIGHT *d[1], ')'].join('');})
                .attr('width', PIECE_SIZE)
                .attr('height', PIECE_SIZE)
                .attr('fill', '#fff')
                .attr('fill-opacity', 0)
                .on('mouseover', function() {
                    d3.select(this).attr('style', 'stroke-width: 1px; stroke: yellow;');
                })
                .on('mouseout', function() {
                    d3.select(this).attr('style', 'stroke-width: 0;');  
                })
                .on('click', function() {
                    console.log('blankspot clicked');
                });
}

function drawLines(svg) {
    var lines = svg.append('g').attr({width: W, height: H});
    for(var i = 0; i < linePositions.length; i++) {
        var pair = linePositions[i];
        var point1 = pair[0];
        var point2 = pair[1];
        lines.append('line')
            .attr('x1', COL_HEIGHT * point1[0] + PIECE_SIZE / 2)
            .attr('y1', 2 + ROW_HEIGHT * point1[1] + PIECE_SIZE / 2)
            .attr('x2', COL_HEIGHT * point2[0] + PIECE_SIZE / 2)
            .attr('y2', 2 + ROW_HEIGHT * point2[1] + PIECE_SIZE / 2)
            .attr('style', 'stroke: #000; stroke-width: 1');
    }
}

function drawPieces(svg) {
    var pieces = svg.append('g')
        .attr('class', 'pieces')
        .attr('background-color', 'red')
        .attr('width', W)
        .attr('height', H);
    
    pieces.selectAll('.piece')
        .data(data)
        .enter()
        .append('rect')
        .attr('class', function(d) { return 'rect-piece ' + d.id })
        .attr('transform', function(d) { return translateFromPosition(d.coords)})
        .attr('width', PIECE_SIZE)
        .attr('height', PIECE_SIZE)
        .attr('fill', function(d) { return 'url(#img' + [d.code, d.set].join('') + ')';});

}

function getPieceCls(coords) {
    return ['piece', coords[0], coords[1]].join('-');
}

function getSpotCls(spot) {
    return ['spot', spot[0], spot[1]].join('-');
}

function xyFromPosition(coords) {
    x = COL_HEIGHT * coords[0];
    y = ROW_HEIGHT * coords[1];
    return [x, y];
}

function translateFromPosition(coords) {
    var xy = xyFromPosition(coords);
    return ['translate(', xy[0], ',', xy[1] , ')'].join('');
}

function resetGame() {
    $('.pieces').remove();
    var svg = d3.select('#svg');
    drawPieces(svg);
}

function clearSpotStyle() {
    d3.selectAll('.rect-spot').attr('style', 'stroke-width: 0');
}

$(function(){
    
    var svg = d3.select('#svg').attr({width: W, height: H});

    initResources(svg);

    //blank spot

    drawLines(svg);

    drawSpots(svg);

    drawPieces(svg);

    //moving logic
    
    var pieceClickSource = Rx.Observable.fromEvent($('.rect-piece'), 'click');
    pieceClickSource.subscribe(
        function(x) {
            console.log('piece clicked');
            clearSpotStyle();
            var ele = d3.select(x.target);
            var pieceData = ele.data()[0];
            ele.attr('style', 'stroke:darkblue;stroke-width:1');
            onMovePiece = pieceData;
            MoveChecker.highlightMoves(pieceData);
        },
        function(e) { console.log('error on piece click');},
        function() { console.log('comleted');}
    );

    var spotClickSource = Rx.Observable.fromEvent($('.rect-spot'), 'click');
    spotClickSource.subscribe(
        function(x) {
            console.log('spot clicked');
            var spotData = d3.select(x.target).data()[0];
            console.log(spotData);
            if (onMovePiece) {
                Game.movePiece(onMovePiece, spotData);
                Game.resetPiece();
            }
        },
        function(e) { console.log('error on piece click');},
        function() { console.log('comleted');}
    );

    $('#btnResetGame').click(function() { resetGame(); });
});

var MoveChecker = (function(){

    var self = this;

    this._isOccupiedSpot = function(spot, set) {
        var occupied = data.filter(function(piece) {
            return piece.coords[0] == spot[0] && piece.coords[1] == spot[1] && piece.set == set;
        });

        return occupied.length > 0;
    }

    this.soldierMoves = function(piece) {
        console.log('soldierMoves');
        var coords = piece.coords;
        var spots = [];
        if (piece.code == 's') {
            //only go down 1 step
            var y = coords[1];
            if (piece.set == 1) {
                if (y < 9) {
                    spots.push([coords[0], y + 1]);
                }
                if (y > 4) {
                    var x = coords[0];
                    if (x > 0) {
                        spots.push([x - 1, y]);    
                    }
                    
                    if (x < 8) {
                        spots.push([coords[0] + 1, y]);
                    }
                }
            } else {
                if (y > 0) {
                    spots.push([coords[0], y - 1]);
                }
                if (y < 5) {
                    var x = coords[0];
                    if (x > 0) {
                        spots.push([x - 1, y]);    
                    }
                    
                    if (x < 8) {
                        spots.push([coords[0] + 1, y]);
                    }
                }
            }
        }
        return spots;
    }

    this.possibleMoves = function(piece) {
        console.log('possibleMoves');
        var spots = [];
        switch(piece.code) {
            case 's':
                spots = self.soldierMoves(piece);
                break;
        }

        console.log(spots);

        spots = spots.filter(function(spot) { return !self._isOccupiedSpot(spot, piece.set);});
        return spots;
    }

    this.highlightMoves = function(piece) {
        console.log('highlightMoves');
        var moves = self.possibleMoves(piece);
        for(var i = 0; i < moves.length; i++) {
            var m = moves[i];
            var ele = d3.select('.' + getSpotCls(m));
            ele.attr('style', 'stroke:green;stroke-width:1');
        }
    }

    return {
        highlightMoves: highlightMoves
    }
})();

var onMovePiece = null;
var Game = (function(){
    var self = this;
    
    this.findD3Piece = function(id) {
        return d3.select('.' + id);
        
    };

    this.resetPiece = function() {
        if (onMovePiece) {
            var ele = self.findD3Piece(onMovePiece.id);
            ele.attr('style', 'stroke:0;');
            onMovePiece = null;
        }
    };

    this.movePiece = function(piece, spot) {
        var ele = self.findD3Piece(piece.id);
        //update the coords
        piece.coords = spot;
        ele.transition().attr('transform', translateFromPosition(spot));
        clearSpotStyle();
    };

    return {
        resetPiece: resetPiece,
        movePiece: movePiece
    }
})();

</script>